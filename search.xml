<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2022.1.29训练赛（二）WP</title>
    <url>/2022/01/29/2022-1-29%E8%AE%AD%E7%BB%83%E8%B5%9B%EF%BC%88%E4%BA%8C%EF%BC%89WP/</url>
    <content><![CDATA[<h2 id="训练赛（二）WP"><a href="#训练赛（二）WP" class="headerlink" title="训练赛（二）WP"></a>训练赛（二）WP</h2><h6 id="2022-1-29"><a href="#2022-1-29" class="headerlink" title="2022.1.29"></a>2022.1.29</h6><p>开题顺序 AHIFGEBJCD</p>
<h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><a id="more"></a>
<p>二分，纯度很高</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cerr</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i = a;i &lt;= b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i = a;i &gt;= b;--i)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mmax = <span class="number">5e5</span>;</span><br><span class="line"><span class="keyword">int</span> n,q,t;</span><br><span class="line"><span class="keyword">int</span> a[mmax + <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;q;</span><br><span class="line"></span><br><span class="line">	rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	rep(i,<span class="number">1</span>,q)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">		<span class="keyword">int</span> p1 = <span class="built_in">std</span>::lower_bound(a + <span class="number">1</span>,a + n + <span class="number">1</span>,t) - a;</span><br><span class="line">		<span class="keyword">int</span> p2 = <span class="built_in">std</span>::upper_bound(a + <span class="number">1</span>,a + n + <span class="number">1</span>,t) - a - <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(a[p1] != t)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="string">' '</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;p1&lt;&lt;<span class="string">' '</span>&lt;&lt;p2&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><p>我觉得两道最难的题之一(还有一题是D)</p>
<p>先想一下，偶数肯定不行($ 2^0 $)</p>
<p>然后手动模拟</p>
<p>1 1 R</p>
<p>3 11 RR</p>
<p>5 101 LRR</p>
<p>7 111 RRR</p>
<p>9 1001 LLRR</p>
<p>11 1011 RLRR</p>
<p>13 1101 LRRR</p>
<p>15 1111 RRRR</p>
<p>17 10001 LLLRR</p>
<p>19 10011 RLLRR</p>
<p>…</p>
<p>发现最小步数与二进制位数有关,并且除去1最后两步都是R</p>
<p>前面几步如果看成二进制</p>
<p>$ 5 -&gt;101 -&gt; (5 - 2^2) / 2 -&gt;0-&gt;L $ </p>
<p>$ 7 -&gt;111 -&gt; (1 - 2^2) / 2 -&gt;1-&gt;R $</p>
<p>$ 9 -&gt;1001 -&gt; (9 - 2^3) / 2 -&gt;0-&gt;LL  $</p>
<p>$ 11 -&gt;1011 -&gt; (11 - 2^3) / 2 -&gt;1-&gt;LR $</p>
<p>$ 13 -&gt;1101 -&gt; (13 - 2^3) / 2 -&gt;10-&gt;RL $</p>
<p>$ 15 -&gt;1111 -&gt; (15 - 2^3) / 2 -&gt;11-&gt;RR $</p>
<p>那么，模拟就完事了</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cerr</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i = a;i &lt;= b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i = a;i &gt;= b;--i)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T,k;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">35</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> temp = <span class="number">1</span>;</span><br><span class="line">	k = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>((temp - <span class="number">1</span>) &lt; x)&#123;</span><br><span class="line">		temp &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">		k++;</span><br><span class="line">	&#125;</span><br><span class="line">	a[k] = a[k - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	x -= (<span class="number">1</span>&lt;&lt;(k - <span class="number">1</span>));</span><br><span class="line">	x /= <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">int</span> pos = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(x)&#123;</span><br><span class="line">		<span class="keyword">if</span>(x &amp; <span class="number">1</span>)&#123;</span><br><span class="line">			a[pos] = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		pos++;</span><br><span class="line">		x&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">		<span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">0</span>) <span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">'R'</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">			solve(n);</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;k&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">			rep(i,<span class="number">1</span>,k)&#123;</span><br><span class="line">				<span class="keyword">if</span>(a[i]) <span class="built_in">cout</span>&lt;&lt;<span class="string">"R "</span>;</span><br><span class="line">				<span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"L "</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><p>遇事不决就打表,注释部分为打表代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cerr</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i = a;i &lt;= b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i = a;i &gt;= b;--i)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mmax = <span class="number">2e5</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,m,l,r;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[mmax + <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="comment">// cin&gt;&gt;l&gt;&gt;r;</span></span><br><span class="line">	<span class="comment">// rep(l,1,10)&#123;</span></span><br><span class="line">	<span class="comment">// 	rep(r,l + 1,10)&#123;</span></span><br><span class="line">	<span class="comment">// 		cout&lt;&lt;l&lt;&lt;' '&lt;&lt;r&lt;&lt;':'&lt;&lt;endl;</span></span><br><span class="line">	<span class="comment">// 		memset(a,0,sizeof(a));</span></span><br><span class="line">	<span class="comment">// 		rep(i,l,r)&#123;</span></span><br><span class="line">	<span class="comment">// 			rep(j,i + 1,r)&#123;</span></span><br><span class="line">	<span class="comment">// 				a[i]++;</span></span><br><span class="line">	<span class="comment">// 				a[j]++;</span></span><br><span class="line">	<span class="comment">// 			&#125;</span></span><br><span class="line">	<span class="comment">// 		&#125;</span></span><br><span class="line">	<span class="comment">// 		rep(i,l,r)&#123;</span></span><br><span class="line">	<span class="comment">// 			cout&lt;&lt;i&lt;&lt;' '&lt;&lt;a[i]&lt;&lt;endl;;</span></span><br><span class="line">	<span class="comment">// 		&#125;</span></span><br><span class="line">	<span class="comment">// 		cout&lt;&lt;endl;</span></span><br><span class="line">	<span class="comment">// 	&#125;</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">	rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">		a[i] += a[i - <span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;l&gt;&gt;r;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;(a[r] - a[l - <span class="number">1</span>]) * (r - l)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="D"><a href="#D" class="headerlink" title="D"></a>D</h3><p>先打表</p>
<p>观察一波(依次为脚标,一次项系数,二次项系数)</p>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEB9c53af70701205702f7cea2462d620c0?method=download&amp;shareKey=5bd7f7943dd1cf4ccd5b0693d7679418" alt="1"></p>
<p>由于$m,n$较大($2e5$),考虑构造</p>
<p>能前缀和一次,我为什么不能前缀和(后缀和)两次</p>
<p>所以二次项前缀和:</p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
</tr>
</thead>
<tbody>
<tr>
<td>$p1[i] = p1[i - 1] + b[i]$</td>
<td>$a_1$</td>
<td>$a_1 + a_2$</td>
<td>$\sum_{i =1}^3a_i$</td>
<td>$\sum_{i = 1}^{4}a_i$</td>
<td>$\sum_{i = 1}^{5}a_i$</td>
</tr>
<tr>
<td>$p2[i] = p2[i - 1] + p1[i - 1]$</td>
<td>$0$</td>
<td>$a_1$</td>
<td>$2a_1 + a_2$</td>
<td>$3a_1 + 2a_2+a_3$</td>
<td>$4a_1 + 3a_2 + 2a_3 + a_4$</td>
</tr>
</tbody>
</table>
</div>
<p>调用 </p>
<p>例如$l = 3,r = 5$</p>
<p>$2b_3+ 2b_4  = p2[5] - p2[3] - (5 - 3) * p1[2]$</p>
<p>所以调用为</p>
<p>$p2[r] - p2[l] - (r - l) * p1[l - 1]$</p>
<p>一次项后缀和</p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>5</th>
<th>4</th>
<th>3</th>
<th>2</th>
<th>1</th>
</tr>
</thead>
<tbody>
<tr>
<td>$s1[i] = s1[i  + 1] + a[i]$</td>
<td>$a_5$</td>
<td>$a_5 + a_4$</td>
<td>$\sum_{i =3}^5a_i$</td>
<td>$\sum_{i = 2}^{5}a_i$</td>
<td>$\sum_{i = 1}^{5}a_i$</td>
</tr>
<tr>
<td>$s2[i] = s2[i + 1] + s2[i + 1] $</td>
<td>$0$</td>
<td>$a_5 $</td>
<td>$2a_5 + a_4$</td>
<td>$3a_5 + 2a_4+a_3$</td>
<td>$4a_5 + 3a_4 + 2a_3 + a_2$</td>
</tr>
</tbody>
</table>
</div>
<p>调用</p>
<p>$s2[l] - s2[r] - s1[r + 1] * (r - l)$</p>
<p>代码如下</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cerr</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i = a;i &lt;= b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i = a;i &gt;= b;--i)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mmax = <span class="number">2e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[mmax +  <span class="number">10</span>],s1[mmax + <span class="number">10</span>],s2[mmax + <span class="number">10</span>],b[mmax + <span class="number">10</span>],p1[mmax + <span class="number">10</span>],p2[mmax + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,m,l,r;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="comment">// cin&gt;&gt;l&gt;&gt;r;</span></span><br><span class="line">	<span class="comment">// rep(l,1,10)&#123;</span></span><br><span class="line">	<span class="comment">// 	rep(r,l + 1,10)&#123;</span></span><br><span class="line">	<span class="comment">// 		cout&lt;&lt;l&lt;&lt;' '&lt;&lt;r&lt;&lt;':'&lt;&lt;endl;</span></span><br><span class="line">	<span class="comment">// 		memset(a,0,sizeof(a));</span></span><br><span class="line">	<span class="comment">// 		memset(b,0,sizeof(b));</span></span><br><span class="line">	<span class="comment">// 		rep(i,l,r)&#123;</span></span><br><span class="line">	<span class="comment">// 			rep(j,i + 1,r)&#123;</span></span><br><span class="line">	<span class="comment">// 				b[i]++;</span></span><br><span class="line">	<span class="comment">// 				a[j]++;</span></span><br><span class="line">	<span class="comment">// 			&#125;</span></span><br><span class="line">	<span class="comment">// 		&#125;</span></span><br><span class="line">	<span class="comment">// 		rep(i,l,r)&#123;</span></span><br><span class="line">	<span class="comment">// 			cout&lt;&lt;i&lt;&lt;' '&lt;&lt;a[i]&lt;&lt;' '&lt;&lt;b[i]&lt;&lt;endl;;</span></span><br><span class="line">	<span class="comment">// 		&#125;</span></span><br><span class="line">	<span class="comment">// 		cout&lt;&lt;endl;</span></span><br><span class="line">	<span class="comment">// 	&#125;</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">	rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">		b[i] = a[i] * a[i];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	per(i,n,<span class="number">1</span>)&#123;</span><br><span class="line">		s2[i] = s1[i + <span class="number">1</span>] + s2[i + <span class="number">1</span>];</span><br><span class="line">		s1[i] = s1[i + <span class="number">1</span>] + a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">		p2[i] = p1[i - <span class="number">1</span>] + p2[i - <span class="number">1</span>]; </span><br><span class="line">		p1[i] = b[i] + p1[i - <span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;l&gt;&gt;r;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;p2[r] - p2[l] - p1[l - <span class="number">1</span>] * (r - l) + s2[l] - s2[r] - s1[r + <span class="number">1</span>] * (r - l)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="E"><a href="#E" class="headerlink" title="E"></a>E</h3><p>这个其实就是贪心</p>
<p>首先考虑回文串为偶数长度的情况,看看一对一对有几对,记为$t$</p>
<p>$t / k * 2$即为偶数长度的最大值;</p>
<p>在考虑能不能往中间塞一个字符使得答案更优,那就是剩下的字符有没有$k$个</p>
<p>那么做法很显然了</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cerr</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i = a;i &lt;= b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i = a;i &gt;= b;--i)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> T,k,t,s,sum,ans;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		sum = <span class="number">0</span>;s = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;k;</span><br><span class="line">		rep(i,<span class="number">1</span>,<span class="number">26</span>)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">			s += t / <span class="number">2</span>;</span><br><span class="line">			sum += t;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		ans = s / k * <span class="number">2</span>; </span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(sum - ans * k &gt;= k) ans++;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="F"><a href="#F" class="headerlink" title="F"></a>F</h3><p>模拟</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cerr</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i = a;i &lt;= b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i = a;i &gt;= b;--i)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mmax = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">15</span>] = &#123;<span class="string">' '</span>,<span class="string">'h'</span>,<span class="string">'e'</span>,<span class="string">'l'</span>,<span class="string">'l'</span>,<span class="string">'o'</span>,<span class="string">'w'</span>,<span class="string">'o'</span>,<span class="string">'r'</span>,<span class="string">'l'</span>,<span class="string">'d'</span>,<span class="string">'!'</span>&#125;;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans;</span><br><span class="line"><span class="keyword">int</span> pos,len;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	getline(<span class="built_in">cin</span>,s);</span><br><span class="line"></span><br><span class="line">	len = s.length();</span><br><span class="line">	pos = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	rep(i,<span class="number">0</span>,len - <span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">			ans++;</span><br><span class="line">			pos = pos % <span class="number">11</span> + <span class="number">1</span>;</span><br><span class="line">			<span class="comment">// cout&lt;&lt;a[pos]&lt;&lt;' '&lt;&lt;s[i]&lt;&lt;endl;</span></span><br><span class="line">			<span class="keyword">if</span>(a[pos] == s[i] || a[pos] == <span class="string">'!'</span>) <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="G"><a href="#G" class="headerlink" title="G"></a>G</h3><p>入门贪心</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cerr</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i = a;i &lt;= b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i = a;i &gt;= b;--i)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mmax = <span class="number">5000</span>;</span><br><span class="line"><span class="keyword">int</span> n,s,a,b;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> x,y;</span><br><span class="line">&#125;f[mmax + <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node x,node y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x.y &lt; y.y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;s&gt;&gt;a&gt;&gt;b;</span><br><span class="line"></span><br><span class="line">	rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;f[i].x&gt;&gt;f[i].y;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">std</span>::sort(f + <span class="number">1</span>,f + n + <span class="number">1</span>,cmp);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">		<span class="keyword">if</span>(a + b &gt;= f[i].x &amp;&amp; s &gt;= f[i].y) &#123;</span><br><span class="line">			ans++;</span><br><span class="line">			s -= f[i].y;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="H"><a href="#H" class="headerlink" title="H"></a>H</h3><p>签个到再走呗</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cerr</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i = a;i &lt;= b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i = a;i &gt;= b;--i)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"Happy New Year!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="I"><a href="#I" class="headerlink" title="I"></a>I</h3><p>数列中对于每个数比它小的数的数量是单调的(废话)</p>
<p>考虑二分</p>
<p>令答案为$ans$</p>
<p>由于自己的个数不好统计,不如统计小于等于$ans - 1$值的个数</p>
<p>大眼观察得到结论,对于确定的行$i$与$ans$,贡献的个数为</p>
<script type="math/tex; mode=display">
min(n - i + 1,max(0,(ans - 1) / i - i + 1))</script><p>那么就可以二分了(</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cerr</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i = a;i &lt;= b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i = a;i &gt;= b;--i)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line">LL n,k,l,r;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span></span>&#123;</span><br><span class="line">	LL sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(LL i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">		sum += <span class="built_in">std</span>::min(n - i + <span class="number">1</span>,<span class="built_in">std</span>::max(<span class="number">0l</span>l,(x - <span class="number">1</span>) / i - i + <span class="number">1l</span>l));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// cout&lt;&lt;sum&lt;&lt;endl;</span></span><br><span class="line">	<span class="keyword">if</span>(sum &lt; k) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line"></span><br><span class="line">	l = <span class="number">0</span>;r = n * n + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(r - l &gt; <span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">long</span> <span class="keyword">long</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="comment">// cout&lt;&lt;"! "&lt;&lt;mid&lt;&lt;endl;</span></span><br><span class="line">		<span class="keyword">if</span>(check(mid)) l = mid;</span><br><span class="line">		<span class="keyword">else</span> r = mid;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;l;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="J"><a href="#J" class="headerlink" title="J"></a>J</h3><p>真的只是模拟啊,大家可以看一看</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cerr</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i = a;i &lt;= b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i = a;i &gt;= b;--i)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mmax = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> T,n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum,ans,k;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> a,b;</span><br><span class="line">&#125;x[mmax + <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node l,node r)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> l.b &lt; r.b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		ans = <span class="number">0</span>,sum = <span class="number">0</span>,k = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">		rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;x[i].a&gt;&gt;x[i].b;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">std</span>::sort(x + <span class="number">1</span>,x + n + <span class="number">1</span>,cmp);</span><br><span class="line"></span><br><span class="line">		rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">			<span class="keyword">if</span>(sum &lt; x[i].b)&#123;</span><br><span class="line">				k += x[i].b - sum;</span><br><span class="line">				sum += x[i].b - sum;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(sum == x[i].b)&#123;</span><br><span class="line">				sum++;</span><br><span class="line">			&#125;</span><br><span class="line">			ans += k * x[i].a;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>比赛</category>
      </categories>
      <tags>
        <tag>比赛</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>欧拉筛备忘录</title>
    <url>/2021/09/21/%E6%AC%A7%E6%8B%89%E7%AD%9B%E5%A4%87%E5%BF%98%E5%BD%95/</url>
    <content><![CDATA[<h2 id="欧拉筛-Sieve-of-Euler-备忘录"><a href="#欧拉筛-Sieve-of-Euler-备忘录" class="headerlink" title="欧拉筛(Sieve of Euler)备忘录"></a>欧拉筛(Sieve of Euler)备忘录</h2><ul>
<li><p>对 $ i\ mod\ prime[j] $ 的理解</p>
<p>当 $ i\ mod\ prime[j] = 0$ 时， $i = prime[j] * k $ </p>
<p>故 $i <em> prime[j  + 1] = prime[i]  </em> k * prime[j + 1]$</p>
<p>根据欧拉筛的定义，为了让一个合数的 <strong>最小素因子</strong> 将他们筛去，此时应该break，等待 $i = prime[j + 1] * k$ 时再进行操作.</p>
<p>如此便保证了每一个数最多被筛都一遍，将复杂度从$O(nlognlogn)$降低至 $O(n)$ .</p>
<a id="more"></a>
<p>代码如下:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cerr</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i = a;i &lt;= b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i = a;i &gt;= b;--i)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mmax = <span class="number">1e3</span>;</span><br><span class="line"><span class="keyword">int</span> n,len = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> prime[mmax + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[mmax + <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">	vis[<span class="number">0</span>] = vis[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	rep(i,<span class="number">2</span>,n)&#123;</span><br><span class="line">		<span class="keyword">if</span>(!vis[i]) &#123;</span><br><span class="line">			prime[++len] = i;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= len &amp;&amp; prime[j] * i &lt;= n ;j++)&#123;</span><br><span class="line">			vis[prime[j] * i] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(!(i % prime[j])) <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>模板</category>
      </categories>
      <tags>
        <tag>素数</tag>
        <tag>模板</tag>
      </tags>
  </entry>
  <entry>
    <title>约瑟夫问题(Josephus Problem)</title>
    <url>/2021/09/20/%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98-Josephus-Problem/</url>
    <content><![CDATA[<h2 id="约瑟夫问题-Josephus-Problem"><a href="#约瑟夫问题-Josephus-Problem" class="headerlink" title="约瑟夫问题(Josephus Problem)"></a>约瑟夫问题(Josephus Problem)</h2><h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p>$n$ 个人围成一圈,从第一个人开始报数,报道 $m$ 的人离队;再由下一个人开始报数，数到 $M$ 的人出圈… 求最后一个离队的人的编号.</p>
<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><h4 id="暴力模拟"><a href="#暴力模拟" class="headerlink" title="暴力模拟"></a>暴力模拟</h4><p>复杂度 $O(n * m)​$</p>
<h4 id="优化暴力"><a href="#优化暴力" class="headerlink" title="优化暴力"></a>优化暴力</h4><a id="more"></a>
<p>用vector维护.</p>
<p>复杂度 $O(nlogn)$ (?存疑)</p>
<h4 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h4><p>没想到吧,线段树也能做.</p>
<p>复杂度 $O(nlogn)$</p>
<p><strong>以上三种都能获得完全报数序列</strong></p>
<h4 id="数学方法"><a href="#数学方法" class="headerlink" title="数学方法"></a>数学方法</h4><p>将人的序号修改为从 $0$ 开始,即</p>
<script type="math/tex; mode=display">
0\ ,1\ ,2\ ,3\ ,4\ ,5\ ,6\ ,...n-2\ ,n-1</script><p>所以可以发现</p>
<p>第一个离队人为 $(m - 1)\ mod\ n$</p>
<p>Ta离队后,第一个报数的同学为 $m\ mod\ n$ ,令Ta为 $k_1$ ,新队列记为</p>
<script type="math/tex; mode=display">
k_1\ ,k_1+1\ ,k_1+2\ ,...0\ ,1\ ,...k_1 - 2</script><p>重新编号</p>
<script type="math/tex; mode=display">
0\ ,1\ ,2\ ,...n - 2</script><p>此时离队人为 $(m - 1)\ mod\ (n - 1)$</p>
<p>下一个报道数的人为 $m\ mod\ (n - 1)$ ,记为 $k_2$ ,新队列记为</p>
<script type="math/tex; mode=display">
k_2\ ,k_2+1\ ,k_2+2\ ,...0\ ,1\ ,...k_2 - 2</script><p>重新编号</p>
<script type="math/tex; mode=display">
0\ ,1\ ,2\ ,...n - 3</script><p>从上面的推导过程中可以发现,我们每次将 $n$ 个人的问题转化成了 $n - 1$ 个人的问题,自然的可以想到递推.</p>
<p>记 $f(n ,m)$ 为 $n$ 个人报道 $m$ 时出列,最后一个出队的编号(从 $0$ 开始).</p>
<p>易知 $f(1,k) = 0$</p>
<p>根据上述推到过程, $f(n-1,m)$ 的编号在 $n$ 中需要加上 $k_1$ 或 $m\ mod\ n$ ,即</p>
<script type="math/tex; mode=display">
f(n,m) = (f(n - 1,m) + m\ mod\ n)\ mod\ n</script><p>化简得到最终递推式</p>
<script type="math/tex; mode=display">
f(n,m) = (f(n - 1,m) + m)\ mod\ n,f(1,m) = 0</script><p>其本质就是还原出Ta在队伍规模为 $n$ 时的编号.</p>
<p>代码如下:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cerr</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i = a;i &lt;= b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for(int i = a;i &gt;= b;--i)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"></span><br><span class="line">	rep(i,<span class="number">2</span>,n)&#123;</span><br><span class="line">		ans = (ans + m) % i;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>复杂度O(n)</p>
<h3 id="问题拓展"><a href="#问题拓展" class="headerlink" title="问题拓展"></a>问题拓展</h3><p>$n$ 个人围成一圈,从第一个人开始报数,报道 $m$ 的人离队;再由下一个人开始报数，数到 $M$ 的人出圈… 求 <strong>第 $k$ 个</strong> 离队的人的编号.</p>
<p>很自然的可以结合上述的数学方法,思考3秒.</p>
<p>3</p>
<p>2</p>
<p>1</p>
<p>第 $k$ 个出列的人,就是队伍规模为 $n-k+1$ 时出列的第一个人!</p>
<p>此时这个人的编号此时就是 $(m - 1)\ mod\ (n - k+ 1)$</p>
<p>通过上述数学方法即可还原出他在队伍规模为 $n$ 的编号.</p>
<p>代码如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line"></span><br><span class="line">using std::cin;using std::cout;using std::cerr;using std::endl;</span><br><span class="line"></span><br><span class="line">#define rep(i,a,b) for(int i &#x3D; a;i &lt;&#x3D; b;++i)</span><br><span class="line">#define per(i,a,b) for(int i &#x3D; a;i &gt;&#x3D; b;--i)</span><br><span class="line"></span><br><span class="line">int n,m,k,ans &#x3D; 0;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line"></span><br><span class="line">	std::ios::sync_with_stdio(0);</span><br><span class="line">	cin.tie(0);</span><br><span class="line"></span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line"></span><br><span class="line">	ans &#x3D; (m - 1) % (n - k + 1);</span><br><span class="line"></span><br><span class="line">	rep(i,n - k + 2,n)&#123;</span><br><span class="line">		ans &#x3D; (ans + m) % i;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	cout&lt;&lt;ans;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>模板</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>模板</tag>
      </tags>
  </entry>
  <entry>
    <title>伪保姆级博客开设教程</title>
    <url>/2021/09/05/%E4%BC%AA%E4%BF%9D%E5%A7%86%E7%BA%A7%E5%8D%9A%E5%AE%A2%E5%BC%80%E8%AE%BE%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="伪保姆级博客开设教程"><a href="#伪保姆级博客开设教程" class="headerlink" title="伪保姆级博客开设教程"></a>伪保姆级博客开设教程</h2><p><strong>本文不涉及任何技术细节，别问，问就是我不知道。</strong></p>
<p><em>不管白猫黑猫，能抓老鼠的就是好猫 。——Mr.Deng</em></p>
<p><em>我不曾了解轮子是如何制造的，只要他能转起来可以了。——克拉克 康斯坦丁(Clark Constantine)</em></p>
<p><del>没有一个计算机专业学生能拒绝拥有自己的博客，除非囊中羞涩没钱买服务器。</del></p>
<p>现在，我为大家提供一个免费搭建博客的方法。</p>
<p>可以先看看<a href="clconstantine.github.io">效果</a>(不过我就瞎折腾了一下，真正更新就咕咕咕咕咕了)</p>
<h4 id="必备工具"><a href="#必备工具" class="headerlink" title="必备工具"></a>必备工具</h4><a id="more"></a>
<ul>
<li>电脑</li>
<li><del>科学上网</del></li>
<li>会markdown的你(当然你会git &amp; node.js更好  <del>我也不会</del>)</li>
</ul>
<h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ul>
<li><p>注册一个<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>账号</p>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEB21b5aec9bdc20561c980f7dc03dfb957?method=download&amp;shareKey=24e3345346d77491cbb8dc5dd6d657c3" alt=""></p>
</li>
<li><p>根据自己情况安装<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">node.js</a></p>
<p>这一步要自己解决哦，google bing baidu 等着你。</p>
<p>官方文档 <a href="https://nodejs.org/en/docs/" target="_blank" rel="noopener">en</a> <a href="http://nodejs.cn/learn" target="_blank" rel="noopener">cn</a></p>
</li>
<li><p>更新npm</p>
<p>打开cmd，输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install npm@latest -g</span><br></pre></td></tr></table></figure>
<p>等待更新完毕。</p>
<p>官方文档 <a href="https://docs.npmjs.com/" target="_blank" rel="noopener">en</a>  <a href="https://www.npmjs.cn/" target="_blank" rel="noopener">cn</a></p>
</li>
<li><p>根据电脑系统安装<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">git</a> (以下使用以git for windows 为例 <del>用Linux的大佬自然可以不用看了，浪费巨巨您的时间</del>)</p>
<p>可以参考这篇<a href="https://www.cnblogs.com/xueweisuoyong/p/11914045.html" target="_blank" rel="noopener">博客</a>(你发现了嘛，google bing baidu 才是硬道理)</p>
</li>
</ul>
<h4 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h4><ul>
<li><p>登录github，点击右上角头像 <strong>旁边</strong> 的加号</p>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEB74648d00178005426471753cb28d1139?method=download&amp;shareKey=47a74853ad9c6f6d5383c399b66a7f31" alt=""></p>
</li>
<li><p>点击 new repository</p>
</li>
</ul>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEB780047cf02634af584b35b1e645f1981?method=download&amp;shareKey=f928351ff85e6d5bb0e37f19e20b98a2" alt=""></p>
<ul>
<li><p>在 repository name 中填入 <em>username.github.io</em>，其中username为你的用户名。</p>
<p>比如你叫的用户名为 <em>shenben</em>，就填入 <em>shenben.github.io</em> </p>
<p>然后创建。</p>
<p>注意：</p>
<ul>
<li>注册的邮箱记得验证</li>
<li>由于奇怪的原因，部分仓库创建后需要等待一段时间才会显示。</li>
</ul>
</li>
<li><p>创建完成后不用管跳出来的东西。</p>
</li>
</ul>
<h4 id="配置ssh-key"><a href="#配置ssh-key" class="headerlink" title="配置ssh key"></a>配置ssh key</h4><ul>
<li><p>既然是本地更新再传的网上，必然要和服务器连接，那如何让服务器知道你是你呢，这时ssh  key就派上用场了。</p>
</li>
<li><p>如果你之前没有用过ssh key ，打开cmd，输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure>
<p>记得把 <em>你的邮箱</em> 替换掉</p>
<p>然后打三个回车</p>
</li>
<li><p>如果你用过ssh key，可以跳过上一步。</p>
</li>
<li><p>上面一步最终会在你电脑的 <strong>用户目录</strong> 下生成一个.ssh的文件夹，打开后用 <strong>记事本等</strong> 方式打开 <em>id_rsa.pub</em>，复制。</p>
</li>
<li><p>进入github，点击右上角头像，进入settings -&gt;SSH and GPG keys -&gt;new SSH key</p>
</li>
</ul>
<p>  <img src="https://note.youdao.com/yws/api/personal/file/WEB8486e52a1516097ecfc4a1da49738b00?method=download&amp;shareKey=3894280e4c986daf6e6864a0938f4baf" alt="4"></p>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEBe02d2d1ba5979a0dd32aa45fc30eb886?method=download&amp;shareKey=7a17ec92e6402987f7ff4744f33ec30e" alt="Inked5_LI"></p>
<ul>
<li>title随便编，把刚才复制的东西粘贴到key里，保存</li>
</ul>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEBa8058f2552915c8cd8963ef6b3af3815?method=download&amp;shareKey=476125c2f9adac13c2babedf3af9c73c" alt="6"></p>
<ul>
<li>最后测试，输入</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<pre><code>若出现
</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hi *********! You’ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>
<pre><code>的字样，则已经成功。
</code></pre><h4 id="用hexo生成博客"><a href="#用hexo生成博客" class="headerlink" title="用hexo生成博客"></a>用hexo生成博客</h4><ul>
<li><p>hexo时一个非常强大的博客发布工具，拥有众多插件与主题(theme)。</p>
<p><a href="https://hexo.io/" target="_blank" rel="noopener">官网</a> <a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">github官方</a></p>
</li>
<li><p>原理：</p>
<p>我只知道是保存静态文件，其他的咕咕咕咕咕咕咕。</p>
</li>
<li><p>注意：</p>
<ul>
<li>hexo版本更新较快，使用时不同主题时记得查看支持版本。</li>
<li>hexo 有两种 <em>_config.yml</em> 文件，一个再根目录下的全局 <em>_config.yml</em> ，一个在各种theme下。</li>
</ul>
</li>
<li><p>安装，打开cmd，输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure>
</li>
<li><p>在使用hexo之前，我们首先要学习几个简单的cmd命令</p>
<ul>
<li><p><em>cd</em> ：进入不同文件夹</p>
<p>e.g.      cd 新建文件夹        进入所在目录下的新建文件夹</p>
<pre><code>    cd ..              返回上一文件夹（返回父文件夹）
</code></pre></li>
<li><p><em>dir</em> ：查看某文件夹下的所有文件和文件夹。</p>
<p>e.g. <img src="https://note.youdao.com/yws/api/personal/file/WEBbe3e517671e12a3a52877296e938e38e?method=download&amp;shareKey=25a4c62561c436b514445455a479a77d" alt="7"></p>
</li>
<li><p>其他的······用的时候再查呗。</p>
</li>
</ul>
</li>
<li><p>找一个文件夹，比如在D盘新建一个文件夹 <em>我的blog</em> （建议还是英文路径，这里只是示范）</p>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEB2fe4aa4a566a213ff58dae1447cd4555?method=download&amp;shareKey=a3dc2c923d491f247faca5a5e42ab6f8" alt="8"></p>
<p>打开cmd，进入该目录</p>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEB8e4b71c351743008fec8bc0296d6da9b?method=download&amp;shareKey=8fc8deade5c3364bce4d8a1be07657dc" alt="9"></p>
<p>输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<p>进行初始化，完成后出现下列文件。</p>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEB5226d9dc370370f2fb28ae10e36a8c3f?method=download&amp;shareKey=a2bfce00c417fb9f2ca255866ab6bc9f" alt="10"></p>
</li>
<li><p>接下来介绍hexo的两个命令</p>
<p> <em>hexo g</em> ：生成网页文件。</p>
<p> <em>hexo s</em> ：启动本地预览服务，启动后用浏览器打开<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000</a>即可看到内容</p>
<pre><code>       （如果端口占用冲突，请参考google bing baidu ）ovo
</code></pre></li>
<li><p>我们试一下</p>
</li>
</ul>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEB06475fd0cf5266ce4a911e7f346e7a76?method=download&amp;shareKey=0416781be8e94d9fe8a81b797e530778" alt="11"></p>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEB8ec0551a947dd32b5cb53cf53ab6ebbe?method=download&amp;shareKey=1e8ae7a8e73dfa80d6a9472ed8cfc30f" alt="12"></p>
<ul>
<li>当然这是默认主题，修改主题属于进阶内容，暂时放一放。</li>
</ul>
<h4 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a>部署博客</h4><ul>
<li><p>以上属于本地预览，我们要做的事请当然是上传到网上让大家访问。</p>
</li>
<li><p>在上传前，还需要在 <strong>根目录</strong> 中的 <em>_config.yml</em> 中配置deploy部分</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repository: git@github.com:username&#x2F;username.github.io.git</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure>
<p>记得把 <em>username</em> 换成你自己的用户名。</p>
</li>
<li><p>接下来安装一个插件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>请使用git bash执行上述安装命令。（你问我git bash在哪儿？桌面右键。）</p>
</li>
<li><p>在保证 <strong>ssh key</strong> ，<strong>deploy</strong>， <strong>插件</strong>安装完毕之后，打开cmd，执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>即可上传成功。</p>
</li>
<li><p>接下来访问 <em>username.github.io</em> 就可以看到你的博客了。</p>
</li>
<li><p>绑定域名以及cdn加速属于进阶内容，暂时放一放。</p>
</li>
<li><p>以下为hexo常用命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new &quot;postName&quot; #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&#39;ctrl + c&#39;关闭server）</span><br><span class="line">hexo deploy #部署到GitHub</span><br><span class="line">hexo help  # 查看帮助</span><br><span class="line">hexo version  #查看Hexo的版本</span><br><span class="line"></span><br><span class="line">缩写：</span><br><span class="line">hexo n &#x3D;&#x3D; hexo new</span><br><span class="line">hexo g &#x3D;&#x3D; hexo generate</span><br><span class="line">hexo s &#x3D;&#x3D; hexo server</span><br><span class="line">hexo d &#x3D;&#x3D; hexo deploy</span><br><span class="line"></span><br><span class="line">组合：</span><br><span class="line">hexo s -g #生成并本地预览</span><br><span class="line">hexo d -g #生成并上传</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="更新文章"><a href="#更新文章" class="headerlink" title="更新文章"></a>更新文章</h4><ul>
<li><p>博客当然要有自己的文章了，接下来教大家如何更新文章。</p>
</li>
<li><p>首先还是打开cmd，cd进入博客根目录。</p>
</li>
<li><p>执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new &quot;postname&quot;</span><br></pre></td></tr></table></figure>
<p>就可以新建文章，其中双引号不可省略，postname为文章标题，请随意。</p>
</li>
<li><p>生成的文件在根目录\source\_posts下，为.md文件。</p>
</li>
<li><p>md文件使用markdown语言编写。markdown是一门轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、简书、reddit、Diaspora、Stack Exchange、OpenStreetMap 、SourceForge等。推荐大家使用typora进行编辑操作。</p>
</li>
<li><p>关于markdown的学习，网上一抓一大把，这里就不赘述了。</p>
</li>
<li><p>更新完文章后，别忘了生成并上传。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>
</li>
<li><p>有时预览会发现文章太长，这时需要在文章恰当处添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>好了以上就是博客入门搭建了，希望大家折腾的开心。</p>
<p>作者：Constantine</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Comet OJ c1847</title>
    <url>/2020/03/15/c1847/</url>
    <content><![CDATA[<h2 id="c1847"><a href="#c1847" class="headerlink" title="c1847"></a>c1847</h2><p>一道简单的字符串比较。</p>
<p>枚举每一位，进行累加。</p>
<p>这里用到了三目运算符。</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">条件 ? 若为真，则执行该处语句 : 若为假，则执行该处语句；</span><br></pre></td></tr></table></figure>
<p>所以代码如下:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cerr</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mmax = <span class="number">100000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[mmax + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> len,ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;len;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; len;++i)&#123;</span><br><span class="line">		s[i] == <span class="string">'G'</span> ? ++ans:ans; </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>原题地址<a href="https://www.cometoj.com/problem/1847" target="_blank" rel="noopener">https://www.cometoj.com/problem/1847</a></p>
]]></content>
      <categories>
        <category>Comet OJ</category>
      </categories>
      <tags>
        <tag>模拟</tag>
        <tag>CometOJ</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>Comet OJ c1477</title>
    <url>/2020/03/11/c1477/</url>
    <content><![CDATA[<h2 id="c1477"><a href="#c1477" class="headerlink" title="c1477"></a>c1477</h2><p>这种题目显然是签到题，简单的字符串比较。</p>
<p>但要注意代码量。</p>
<p>我们不能傻傻打几重循环，显然，数组是一个更好地选择。</p>
<a id="more"></a>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cerr</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1000</span>+<span class="number">10</span>];</span><br><span class="line"><span class="keyword">char</span> st[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n,len,ans=<span class="number">0</span>;</span><br><span class="line">    st[<span class="number">1</span>]=<span class="string">'a'</span>;st[<span class="number">2</span>]=<span class="string">'c'</span>;st[<span class="number">3</span>]=<span class="string">'p'</span>;st[<span class="number">4</span>]=<span class="string">'t'</span>;st[<span class="number">5</span>]=<span class="string">'y'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s+<span class="number">1</span>;</span><br><span class="line">        len=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[len<span class="number">-5</span>+i]!=st[i]) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">6</span>) ans++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>原题地址<a href="https://www.cometoj.com/problem/1477" target="_blank" rel="noopener">https://www.cometoj.com/problem/1477</a></p>
]]></content>
      <categories>
        <category>Comet OJ</category>
      </categories>
      <tags>
        <tag>CometOJ</tag>
        <tag>字符串</tag>
        <tag>枚举</tag>
      </tags>
  </entry>
  <entry>
    <title>Comet OJ c1023</title>
    <url>/2020/03/10/c1023/</url>
    <content><![CDATA[<h2 id="c1023"><a href="#c1023" class="headerlink" title="c1023"></a>c1023</h2><p>这道题教会了我们观察。</p>
<p>理解题意后得到要求我们输出 </p>
<a id="more"></a>
<script type="math/tex; mode=display">
    1+2+3+4+\cdots +n+n-1+\cdots + 1</script><p>自然想起等差数列和的公式</p>
<script type="math/tex; mode=display">
    S = \frac{(1+n)n}{2}</script><p>自然得到</p>
<script type="math/tex; mode=display">
ans = (n+1)n-n</script><p>下附代码<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cerr</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> N;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;N;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;(N+<span class="number">1</span>)*N-N;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>原题地址<a href="https://www.cometoj.com/problem/1023" target="_blank" rel="noopener">https://www.cometoj.com/problem/1023</a></p>
]]></content>
      <categories>
        <category>Comet OJ</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>模拟</tag>
        <tag>CometOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>神铺在桌面的一张地图</title>
    <url>/2019/09/07/%E7%A5%9E%E9%93%BA%E5%9C%A8%E6%A1%8C%E9%9D%A2%E7%9A%84%E4%B8%80%E5%BC%A0%E5%9C%B0%E5%9B%BE/</url>
    <content><![CDATA[<p><img src="https://note.youdao.com/yws/api/personal/file/WEB39c283e574f542c00fda81236fa0bce1?method=download&shareKey=9244fc9279dd84ea7a3d506da5e17fb7">Sol III，这个灵长类动物——人类——的发源地，被人类称为地球。</p>
<a id="more"></a>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEB7bf5d6048ad8a1a7b8dc92191fd38f42?method=download&shareKey=3571b6e3e1ba5673082046dd9de7df4c"></p>
<p>人们认为神为人类选择了一处完美的家园，殊不知……</p>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEB60198becff7edf0854f5100c592456f4?method=download&shareKey=085031fa817aa7b4d2c98b87f3495bdc"></p>
<p>当人们第一次探明超空间航道时，举国欢庆，地球联合国首脑称“这是一次新的机遇”。人类将目光放到更远的地方</p>
<p>神的地图逐渐展开，真正展现在这个新生种族面前……</p>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEB9545986c8c6a800905ce24144b6d94c6?method=download&shareKey=505796a3266fbaff0518a1c30d5f28fc"></p>
<p>曾经人类认为自己将在这个银河中有一席之地，甚至是这个银河中唯一的“智慧生物”。在科技飞升之后的10年内，人类发展着，前进的车轮没有阻碍，直到有一天……</p>
<p>盲目自大终会带来审判。</p>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEB1f57fe56d779794a740502145fb8d496?method=download&shareKey=29258263b910d6de841770f751844c68"></p>
<p>人类遇到了大麻烦。</p>
<p>最终，人类放下了尊严，成为了附属国。</p>
<p>并入过程很快，也很直接。Sol III成为了宗主国的一部分，</p>
<p>不可分割的一部分。</p>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEBb5363042c77438d640678179fb6f93c7?method=download&shareKey=5ffe98ee0a21bb9d2983693b2465b849"></p>
<p>人类的视野又回到了地球，抬头仰望，或许能看见宗主国的驻军。</p>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEBd8e30963361f3c6092eeb7b1b7e21456?method=download&shareKey=6846537339072a718b9aebf9a1633ef0"></p>
<p>Sol III 成为了这个国家的一颗边陲行星。</p>
<p>神的地图最终只展现给这个新生种族小小的一角。</p>
<p>人类的目光，何时才能穿过战争的迷雾，去窥探那神的地图上的小小一角。</p>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEBe10cf3e776b7f7d8c3f51612360b1daf?method=download&shareKey=bb7d66e19208f1345bf2321f1a6c6e30"></p>
]]></content>
      <categories>
        <category>随想</category>
      </categories>
      <tags>
        <tag>随想</tag>
      </tags>
  </entry>
  <entry>
    <title>百度之星——初赛(三)</title>
    <url>/2019/08/24/%E7%99%BE%E5%BA%A6%E4%B9%8B%E6%98%9F%E2%80%94%E2%80%94%E5%88%9D%E8%B5%9B%E4%B8%89/</url>
    <content><![CDATA[<h1 id="T1-最短路-I"><a href="#T1-最短路-I" class="headerlink" title="T1  最短路 I"></a>T1  最短路 I</h1><p>题面：</p>
<p>有一张 n 个点的完全无向图，点的标号是 1…n，其中边(i,j) 的长度是 i xor j，现在你需要求出点 1 到点 n 的最短路的                长度。</p>
<p>输入：</p>
<a id="more"></a>
<p>第一行一个正整数 T 表示数据组数 $(1\le T\le 100)$</p>
<p>对于每组数据：第一行一个正整数 n 表示点数 $(2\le n\le 10e5)$</p>
<p>输出：</p>
<p>输出 T 行，每行一个整数表示点 1 到点 n 的最短路</p>
<p>思路：</p>
<p>先模拟一下，到5就差不多了</p>
<p>发现规律：最短路即是 $1\; xor\; n$，然后就秒了</p>
<p>代码 ：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cerr</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;<span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n,T;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;(<span class="number">1</span>^n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>比赛</category>
      </categories>
      <tags>
        <tag>比赛</tag>
        <tag>uncompleted</tag>
      </tags>
  </entry>
</search>
